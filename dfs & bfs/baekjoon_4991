#
# 백준 
# DFS / BFS
# 4991. 로봇 청소기 (골드2)
#
"""
아이디어 : BFS를 이용해 각 더러운 칸(*)에 도달하기 위한 치소 거리를 계산, 이후에 모든 순열에 대하여 각각 거리를 계산해 최소 거리 구하기
CP : 
1. '.o...*.'와 같은 입력 있을 때 input().rstrip() 처리하면 '\n' 제거된다
2. 특정 함수에서 전역변수 읽기 가능하고, global을 통해 수정도 가능하다
3. bfs 함수에서는 최소 기능만 수행(+ 'x' 방문하지 않는다)하고, 함수에서 visited 2차원 배열 리턴해서 바깥에서 처리(dirties와의 거리 계산 저장)
4. bfs에서 시작 위치 거리 1로 설정하면 다시 돌아오지 않는다.
"""
from itertools import permutations
from collections import deque
import sys
input = sys.stdin.readline

dx = [-1, 0, 1, 0]
dy = [0, 1, 0, -1]

def bfs(x, y):
    q = deque([(x, y)])
    visited = [
        [0]*w
        for _ in range(h)
    ]
    visited[x][y] = 1   #시작점으로 다시 못오게 하려고
    while q:
        x, y = q.popleft()
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            if 0 <= nx < h and 0 <= ny < w:
                if graph[nx][ny] != 'x' and not visited[nx][ny]:
                    visited[nx][ny] = visited[x][y] + 1
                    q.append([nx, ny])       
    return visited

while True:
    w, h = map(int, input().split())

    if (w, h) == (0, 0):
        break

    graph = []
    dirties = []
    x, y = 0, 0     #청소기 현재위치
    for i in range(h):
        row = input().strip()
        graph.append(row)
        
        for j in range(w):
            if row[j] == '*':
                dirties.append((i, j))
            elif row[j] == 'o':
                x, y = i, j

    #처음 로봇 위치 -> 먼지 거리
    r2d, flag = [], 0
    visited = bfs(x, y)
    for i, j in dirties:
        if not visited[i][j]:
            flag = 1
            break
        r2d.append(visited[i][j]-1)
    if flag:    # 방문하지 못하는 더러운 칸
        print(-1)
        continue

    #먼지 -> 먼지 거리
    d2d = [
        [0]*len(dirties)
        for _ in range(len(dirties))
    ]
    for i in range(len(dirties)-1):
        visited = bfs(dirties[i][0], dirties[i][1])    
        for j in range(i+1, len(dirties)):
            d2d[i][j] = visited[dirties[j][0]][dirties[j][1]]-1
            d2d[j][i] = d2d[i][j]

    candidates = list(permutations([i for i in range(len(dirties))]))
    ans = 987654321
    for c in candidates:
        dist = 0
        dist += r2d[c[0]]
        i = c[0]
        for j in range(1, len(c)):
            dist += d2d[i][c[j]]
            i = c[j]
        ans = min(ans, dist)
    print(ans)
