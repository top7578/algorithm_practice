from collections import deque
import sys
input = lambda : sys.stdin.readline().rstrip()

dx = [-1, 0, 1, 0]
dy = [0, 1, 0, -1]

def bfs(x, y):
  q = deque()
  q.append([x, y])
  visited = [[False]*m for _ in range(n)]
  visited[x][y] = True
  distance = [[0]*m for _ in range(n)]
  distance[x][y] = 0

  max_ = 0
  while q:
    x, y = q.popleft()
    for i in range(4):
      nx = x + dx[i]
      ny = y + dy[i]
      if 0 <= nx < n and 0 <= ny < m:
        if not visited[nx][ny]:
          if board[nx][ny] == 'L':
            distance[nx][ny] = distance[x][y] + 1
            max_ = max(max_, distance[x][y] + 1)
            q.append([nx, ny])
            visited[nx][ny] = True
  return max_

n, m = map(int, map(int, input().split()))

board = []
for _ in range(n):
  board.append(list(input()))

ans = 0
for i in range(n):
  for j in range(m):
    if board[i][j] == 'L':
      ans = max(ans, bfs(i, j))

print(ans)
