#
# 백준 
# DFS / BFS
# 14395. 4연산 (골5)
#
"""
아이디어 : 최소 연산 횟수 -> BFS
CP : 
- (1 ≤ s, t ≤ 10^9) 해당 조건으로 인하여 시간복잡도, 공간복잡도를 고려해야 했다. 
    시간복잡도의 경우 +, * 연산을 하게 되면 기하급수적으로 수가 증가하므로 O(log2(N)), next가 t를 넘어가면 continue
    공간복잡도의 경우 배열의 길이가 1,000만을 넘어가면 문제가 발생하므로 set으로 해결
- 사전 순으로 앞서는 것을 출력 -> 해당 연산을 먼저 수행한다  
"""
from collections import deque

import sys
input = sys.stdin.readline

s, t = map(int, input().split())

visited = set()

def bfs(s, tmp):
    global ans
    q = deque([(s, tmp)])
    visited.add(s)
    while q:
        now, tmp = q.popleft()

        if now == t:
            ans = tmp
            break
        
        for next in [now*now, now+now, 0, 1]:

            if next > t:
                continue

            if next not in visited:
                visited.add(now)
                if next == now*now:
                    q.append((next, tmp+"*"))
                elif next == now+now:
                    q.append((next, tmp+"+"))
                elif next == 0:
                    q.append((next, tmp+"-"))                    
                elif next == 1:
                    q.append((next, tmp+"/"))

ans = ""
bfs(s, "")
if s == t:
    print(0)
elif ans == "":
    print(-1)
else:
    print(ans)
