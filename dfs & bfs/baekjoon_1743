from collections import deque
import sys
input = lambda : sys.stdin.readline().rstrip()

dx = [-1, 0, 1, 0]
dy = [0, 1, 0, -1]

def bfs(x, y):
  q = deque()
  q.append([x, y])
  visited[x][y] = True
  cnt = 1
  while q:
    x, y = q.popleft()
    for i in range(4):
      nx = x + dx[i]
      ny = y + dy[i]
      if 0 <= nx < n and 0 <= ny < m:
        if not visited[nx][ny]:
          if board[nx][ny] == 1:
            q.append([nx, ny])
            cnt += 1
            visited[nx][ny] = True
  return cnt

n, m, k = map(int, input().split())

board = [[0]*m for _ in range(n)]

for _ in range(k):
  r, c = map(int, input().split())
  board[r-1][c-1] = 1

visited = [[False]*m for _ in range(n)]

ans = 0
for i in range(n):
  for j in range(m):
    if not visited[i][j] and board[i][j] == 1:
      ans = max(ans, bfs(i, j))

print(ans)
