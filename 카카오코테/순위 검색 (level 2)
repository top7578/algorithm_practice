#
# 2021_카카오블라인드
# 구현
# 3. 순위 검색 (level 2)
#
"""
시간복잡도 : 순차탐색의 경우 시간초과 -> 딕셔너리 활용하여 이진탐색
CP: 
1. 딕셔너리 활용법, defaultdict
2. 이진탐색 사용하려면 정렬 필수
3. bisect 라이브러리를 통해 범위에 해당하는 갯수 알 수 있다
(- 이상, - 이하도 알수 있다)
"""
from collections import defaultdict
from itertools import combinations
from bisect import bisect_left

def solution(info, query):
    
    answer = []

    info_dict = defaultdict(list)

    for i in range(len(info)):
        info_data = info[i].split()
        dict_key = info_data[:-1]   # 점수제외 부분
        dict_val = info_data[-1]    # 점수부분
        # key로 만들 수 있는 모든 조합 완성
        for j in range(5): 
            for c in combinations(dict_key, j):
                tmp = "".join(c)
                info_dict[tmp].append(int(dict_val)) 

    # dict안의 조합들을 점수순으로 정렬
    for key in info_dict:
        info_dict[key].sort()

    # query도 마찬가지로 key와 value로 분리
    for q in query:
        q = q.replace("and ", "")
        q = q.replace("- ", "")
        q_lst = q.split()

        target_key = ''.join(q_lst[:-1])
        target_score = int(q_lst[-1])
        cnt = 0
        if target_key in info_dict:
            target_lst = info_dict[target_key]
            idx = bisect_left(target_lst, target_score)
            cnt = len(target_lst) - idx
        answer.append(cnt)
    return answer

#print(solution(["java backend junior pizza 150","python frontend senior chicken 210","python frontend senior chicken 150","cpp backend senior pizza 260","java backend junior chicken 80","python backend senior chicken 50"], ["java and backend and junior and pizza 100","python and frontend and senior and chicken 200","cpp and - and senior and pizza 250","- and backend and senior and - 150","- and - and - and chicken 100","- and - and - and - 150"]))
